Write a program to solve a 0-1 Knapsack problem using dynamic 
programming or branch and bound strategy. 

def knapsack_01(n, values, weights, W):
    # Initialize dp table with zeroes
    dp = [[0] * (W + 1) for _ in range(n + 1)]

    # Fill dp table
    for i in range(1, n + 1):
        for w in range(W + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]

    # Find selected items
    selected_items = []
    i, w = n, W
    while i > 0 and w > 0:
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(i - 1)
            w -= weights[i - 1]
        i -= 1

    selected_items.reverse()  # To maintain original item order

    print("Maximum value:", dp[n][W])
    print("Selected items:", selected_items)

    return selected_items

def main():
    # Dynamic input for the number of items
    n = int(input("Enter the number of items: "))

    # Dynamic input for values and weights
    values = []
    weights = []

    for i in range(n):
        value = int(input(f"Enter value for item {i + 1}: "))
        weight = int(input(f"Enter weight for item {i + 1}: "))
        values.append(value)
        weights.append(weight)

    # Dynamic input for knapsack capacity
    W = int(input("Enter the capacity of the knapsack: "))

    # Calling the knapsack function
    knapsack_01(n, values, weights, W)

if __name__ == "__main__":
    main()
